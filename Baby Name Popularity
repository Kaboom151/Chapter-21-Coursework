import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

public class BabyNamePopularityRank extends Application {
    private Map<String, Integer>[] mapForBoy = new HashMap[10];
    private Map<String, Integer>[] mapForGirl = new HashMap[10];

    private Button btFindRanking = new Button("Find Ranking");
    private ComboBox<Integer> cboYear = new ComboBox<>();
    private ComboBox<String> cboGender = new ComboBox<>();
    private TextField tfName = new TextField();
    private Label lblResult = new Label();

    @Override
    public void start(Stage primaryStage) {
        GridPane gridPane = new GridPane();
        gridPane.add(new Label("Select a year:"), 0, 0);
        gridPane.add(new Label("Boy or girl?"), 0, 1);
        gridPane.add(new Label("Enter a name:"), 0, 2);
        gridPane.add(cboYear, 1, 0);
        gridPane.add(cboGender, 1, 1);
        gridPane.add(tfName, 1, 2);
        gridPane.add(btFindRanking, 1, 3);
        gridPane.setAlignment(Pos.CENTER);
        gridPane.setHgap(5);
        gridPane.setVgap(5);

        BorderPane borderPane = new BorderPane();
        borderPane.setCenter(gridPane);
        borderPane.setBottom(lblResult);
        BorderPane.setAlignment(lblResult, Pos.CENTER);

        Scene scene = new Scene(borderPane, 370, 160);
        primaryStage.setTitle("Exercise21_11");
        primaryStage.setScene(scene);
        primaryStage.show();

        for (int year = 2001; year <= 2010; year++) {
            cboYear.getItems().add(year);
        }
        cboYear.setValue(2001);

        cboGender.getItems().addAll("Male", "Female");
        cboGender.setValue("Male");

        // Initialize maps
        for (int i = 0; i < 10; i++) {
            mapForBoy[i] = new HashMap<>();
            mapForGirl[i] = new HashMap<>();
            loadData(2001 + i, mapForBoy[i], mapForGirl[i]);
        }

        btFindRanking.setOnAction(e -> findRanking());
    }

    private void loadData(int year, Map<String, Integer> boyMap, Map<String, Integer> girlMap) {
        String urlStr = "http://liveexample.pearsoncmg.com/data/babynamesranking" + year + ".txt";
        try {
            URL url = new URL(urlStr);
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = br.readLine()) != null) {
                String[] tokens = line.split("\\s+");
                int rank = Integer.parseInt(tokens[0]);
                String boyName = tokens[1];
                String girlName = tokens[3];
                boyMap.put(boyName, rank);
                girlMap.put(girlName, rank);
            }
            br.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void findRanking() {
        int yearIndex = cboYear.getValue() - 2001;
        String gender = cboGender.getValue();
        String name = tfName.getText().trim();

        Map<String, Integer> map = (gender.equals("Male")) ? mapForBoy[yearIndex] : mapForGirl[yearIndex];
        Integer rank = map.get(name);

        if (rank != null) {
            lblResult.setText("Ranking of name " + name + " in year " + cboYear.getValue() + " is " + rank);
        } else {
            lblResult.setText("Name " + name + " not found in year " + cboYear.getValue());
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}


